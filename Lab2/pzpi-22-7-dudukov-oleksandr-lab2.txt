

Міністерство освіти і науки України
Харківський національний університет радіоелектроніки

Кафедра програмної інженерії

Звіт
З лабораторної роботи №2
З дисципліни «Архітектура програмного забезпечення»
на тему: «РОЗРОБКА СЕРВЕРНОЇ ЧАСТИНИ СИСТЕМИ »

Виконавець:		
ст. гр. ПЗПІ-22-7						                    Дудуков  О. С. 

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	


                                                                                                       









Харків 2025
 
1 ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	09.05.2025	0.1	Створено розділ «Завдання»
2	11.05.2025	0.1	Створено розділ «Опис виконаної роботи»
3	12.05.2025	0.1	Наповнено додатки А та Б
4	14.05.2025	0.1	Підбито висновки роботи
5	16.05.2025	0.1	Заповнено додаток В з програмним кодом


2 ЗАВДАННЯ


Метою лабораторної роботи є розробка бази даних для серверної
частини програмної системи моніторингу працездатності офісу та прикладного програмного інтерфейсу (API) для взаємодії з клієнтськими додатками. Завдання включають:Розробка будови програмної системи
1.	Розробка загальної структури програмної системи
2.	Створення UML-діаграми прецедентів для серверної частини, що
відображає взаємодію користувачів із системою
3.	Створення ER-діаграми даних, яка моделює сутності (користувачі, кімнати,
сенсори, параметри мікроклімату)
4.	Проєктування та створення бази даних програмної системи
5.	Розробка діаграми структури бази даних
6.	Реалізація функцій для взаємодії з базою даних (створення, читання,
оновлення, видалення)
7.	Розробка REST API для обробки запитів клієнтів (мобільного додатку, веб
інтерфейсу)
8.	Створення специфікації API з описом кінцевих точок (endpoint) та
відповідей сервера
9.	Програмна реалізація API та логіки взаємодії з базою даних
10.	Тестування працездатності API за допомогою Postman або аналогічного
інструменту
11.	Завантаження програмного коду до GitHub-репозиторію
12.	Створення відеозапису з демонстрацією роботи API та бази даних
13.	Завантаження звіту у форматі PDF на платформу dl.nure.ua та у текстовому
форматі на GitHub.

 
3 ОПИС ВИКОНАНОЇ РОБОТИ

У межах лабораторної роботи було реалізовано серверну частину програмної системи для моніторингу працездатності офісу, яка призначена для збору та обробки даних із IoT-сенсорів, фіксації присутності співробітників і надання аналітики адміністраторам офісів. Система включає сервер, IoT-пристрої, веб-клієнт та мобільний застосунок.
Серверна частина розроблена на платформі Node.js із використанням фреймворку Express.js. Для зберігання даних використовується NoSQL база даних MongoDB, доступ до якої реалізовано через ORM-бібліотеку Mongoose. Обмін даними з IoT-сенсорами (температура, вологість, CO₂) здійснюється за допомогою протоколу MQTT.
Клієнтська частина представлена веб-застосунком на React із використанням Tailwind CSS для стилізації та візуалізації даних. Мобільний застосунок для Android, реалізований на Kotlin, дозволяє користувачам фіксувати свою присутність на робочому місці та отримувати push-сповіщення про критичні зміни мікроклімату.
Було розроблено UML-діаграму прецедентів, яка описує ключові сценарії використання системи. Основні актори — співробітник (User), який має змогу авторизуватись, фіксувати присутність, переглядати дані умов у кімнатах, та адміністратор (Admin), який може керувати кімнатами, переглядати статистику та здійснювати резервне копіювання бази даних.
ER-діаграма моделює основні сутності: користувачі, кімнати, сенсори, параметри мікроклімату, сповіщення. Для кожної сутності реалізовано CRUD-функціональність у базі даних MongoDB, а також взаємозв’язки між ними. Наприклад, кімната пов’язана з кількома сенсорами, а кожен користувач може мати історію присутності.
Розроблено REST API для взаємодії з клієнтами. Основні маршрути включають:
•	Users: реєстрація, авторизація, перегляд профілю
•	Presence: фіксація присутності, історія перебування
•	Rooms: додавання/редагування кімнат, перегляд стану
•	Sensors: отримання даних з сенсорів, моніторинг умов
•	Notifications: автоматизовані push-сповіщення
API реалізовано з використанням контролерів, маршрутів та middleware для автентифікації на основі JWT та контролю доступу за ролями.
Функціональність API протестовано через Postman. Перевірено:
•	реєстрацію та авторизацію користувачів;
•	створення та оновлення кімнат;
•	передавання даних із сенсорів;
•	фіксацію присутності співробітників;
•	генерацію сповіщень про перевищення допустимих норм.
Усі матеріали, включаючи програмний код, діаграми та опис, завантажено до GitHub-репозиторію, а також підготовлено відео з демонстрацією API. Звіт експортовано у форматі PDF і текстовий файл у кодуванні UTF-8.
 

ВИСНОВКИ

У результаті виконання лабораторної роботи №2 було розроблено базу даних для серверної частини системи моніторингу працездатності офісу з використанням MongoDB та бібліотеки Mongoose. Створено UML-діаграму прецедентів, ER-діаграму та діаграму структури бази даних, що відображають основні сценарії використання системи та логіку зберігання даних.
Було реалізовано REST API для взаємодії з клієнтськими застосунками, включаючи маршрути для реєстрації користувачів, фіксації присутності, керування кімнатами та сенсорами, а також надсилання сповіщень. Функції роботи з базою даних забезпечують повний набір CRUD-операцій для основних сутностей.
API протестовано на відповідність функціональності, описаній у технічному завданні, за допомогою Postman. Код завантажено до GitHub-репозиторію, а звіт підготовлено для експорту у форматі PDF і текстового файлу з кодуванням UTF-8.
 
ДОДАТОК А
Відеозапис

Відеозапис презентації результатів лабораторної роботи: 

00:00 – Вступ
00:00 – Реєстрація нового користувача
00:00 – Авторизація користувача
00:00 – Перегляд мікроклімату в офісних кімнатах
00:00 – Надсилання автоматичного сповіщення про перевищення норми CO₂
00:00 – Перегляд історії сповіщень
00:00 – Робота адміністратора: перегляд та редагування списку кімнат
00:00 – Завершення демонстрації 
ДОДАТОК Б

Графічні матеріали
 
Рисунок Б.1 — ER-діаграма даних


 
Рисунок Б.2 — UML-діаграма прецедентів


Рисунок Б.3 – UML  Надсилання сповіщення


Діаграма на рис. Б.3 активності демонструє логіку перевірки умов мікроклімату та надсилання нового сповіщення користувачам у системі моніторингу працездатності офісу.
Рисунок Б.4 – UML  Перевірка на задовільність середовища 

Рисунок Б.4 – UML Перевірка на задовільність середовища

Діаграма на рис. Б.4 описує, як система перевіряє параметри мікроклімату приміщення на відповідність встановленим нормам та приймає рішення щодо подальших дій.

 
Рисунок Б.5 – UML Панель адміністратора

Діаграма на рис. Б.5 демонструє процес взаємодії адміністратора з панеллю керування, включаючи перегляд списку кімнат, стану сенсорів та отриманих сповіщень.

ДОДАТОК В
Програмний код

В.1 Фрагмент програмного коду надсилання сповіщення
1. const express = require('express');
2. const Notification = require('../models/notification.model'); 
3. const User = require('../models/user.model'); 
4. const router = express.Router();
5. 
6. 
7. router.get('/', async (req, res) => {
8.   try {
9.     const notifications = await Notification.find(); 
10.     res.status(200).json(notifications);
11.   } catch (error) {
12.     res.status(500).json({ message: error.message });
13.   }
14. });
15. 
16. 
17. router.post('/', async (req, res) => {
18.   const { notification_text } = req.body;
19. 
20.   if (!notification_text) {
21.     return res.status(400).json({ message: 'Текст сповіщення обов\'язковий' });
22.   }
23. 
24.   try {
25.     
26.     const users = await User.find(); 
27. 
28.    
29.     const notifications = await Promise.all(users.map(async (user) => {
30.       const notification = new Notification({
31.         user_id: user._id,
32.         notification_text,
33.         timestamp: new Date(),
34.       });
35. 
36.       
37.       await notification.save();
38.       return notification;
39.     }));
40. 
41.     res.status(201).json({
42.       message: 'Сповіщення успішно надіслано всім користувачам',
43.       notifications,
44.     });
45.   } catch (error) {
46.     res.status(500).json({ message: error.message });
47.   }
48. });
49. 
50. module.exports = router;


В.2 Фрагмент програмного  перевірка на задовільність середовища
1. const express = require('express');
2. const Location = require('../models/location.model');
3. const Notification = require('../models/notification.model');
4. const router = express.Router();
5. 
6. 
7. const temperatureThreshold = { min: 18, max: 24 };
8. const humidityThreshold = { min: 30, max: 60 };
9. const co2Threshold = { max: 1000 };
10. 
11. 
12. const createNotification = async (locationName, alertMessage) => {
13.   const notification = new Notification({
14.     notification_text: `Попередження для локації ${locationName}: ${alertMessage}`,
15.   });
16.   await notification.save();
17.   return notification;
18. };
19. 
20. 
21. router.post('/', async (req, res) => {
22.   const { location_id } = req.body;
23. 
24.   if (!location_id) {
25.     return res.status(400).json({ message: 'Потрібно вказати location_id.' });
26.   }
27. 
28.   try {
29.     
30.     const location = await Location.findById(location_id);
31.     if (!location) {
32.       return res.status(404).json({ message: 'Локацію не знайдено.' });
33.     }
34. 
35.     const { temperature, humidity, co2_level, name } = location;
36.     let alertMessage = '';
37.     let isAlert = false;
38. 
39.     
40.     if (temperature < temperatureThreshold.min || temperature > temperatureThreshold.max) {
41.       alertMessage += `Температура виходить за допустимі межі. Поточна: ${temperature}°C. `;
42.       isAlert = true;
43.     }
44. 
45.     
46.     if (humidity < humidityThreshold.min || humidity > humidityThreshold.max) {
47.       alertMessage += `Вологість виходить за допустимі межі. Поточна: ${humidity}%. `;
48.       isAlert = true;
49.     }
50. 
51.     
52.     if (co2_level > co2Threshold.max) {
53.       alertMessage += `Рівень CO2 занадто високий. Поточний: ${co2_level} ppm. `;
54.       isAlert = true;
55.     }
56. 
57.     
58.     if (isAlert) {
59.       const notification = await createNotification(name, alertMessage);
60. 
61.       return res.status(200).json({
62.         message: 'Умови локації перевірено, сповіщення надіслано.',
63.         notification: notification,
64.       });
65.     } else {
66.       return res.status(200).json({
67.         message: 'Умови локації знаходяться в межах допустимих значень.',
68.       });
69.     }
70.   } catch (error) {
71.     console.error(error);
72.     res.status(500).json({ message: 'Помилка під час перевірки умов локації.', error: error.message });
73.   }
74. });
75. 
76. module.exports = router;
