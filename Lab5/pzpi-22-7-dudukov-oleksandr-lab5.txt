
Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії






Звіт
З лабораторної роботи №5
З дисципліни «Архітектура програмного забезпечення»
на тему: «Розгортання програмної системи та демонстрація її роботи»






Виконавець:		
ст. гр. ПЗПІ-22-7						                    Дудуков О.С. 

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	




Харків 2025
 
5 РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ
5.1 ІСТОРІЯ ЗМІН

Зміни в документі нотуються до таблиці 4.1.

Таблиця 5.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	02.06.2025	0.1	Створено розділ «Історія змін»
2	02.06.2025	0.1	Створено розділ «Завдання»
3	04.06.2025	0.1	Створено розділ «Опис виконаної роботи»
4	04.06.2025	0.1	Створено розділ «Висновки»
5	04.06.2025	0.1	Додано додаток А з посиланням на відеоролик
6	04.06.2025	0.1	Додано додаток Б зі специфікацією API


5.2 ЗАВДАННЯ

Метою виконання цього завдання є повноцінне розгортання та інтеграція всіх ключових компонентів програмної системи OfficeMonitor, а також демонстра- ція її функціональності в реальних умовах. Система OfficeMonitor розроблена для моніторингу працездатності офісного середовища за допомогою IoT-пристроїв та своєчасного інформування про зміни у параметрах (температура, вологість, рівень CO2, присутність працівників). Вона складається з чотирьох основних
модулів: серверної частини, веб-інтерфейсу, мобільного застосунку та IoT-підсистеми, яка базується на сенсорах, інтегрованих із системою. Основна ціль полягає в за- безпеченні безперервної та узгодженої роботи всіх цих компонентів для гаран- тованого точного та своєчасного збору, обробки і відображення даних офісного середовища в режимі реального часу.


5.3 ОПИС ВИКОНАНОЇРОБОТИ

Програмна система OfficeMonitor побудована на основі багаторівневої архіте- ктури, що включає серверну частину, веб-інтерфейс, мобільний додаток та IoT- підсистему. Всі компоненти розроблені з використанням сучасних технологій, що забезпечують стабільність, масштабованість і зручність для користувачів.
Серверна частина
•	Технології: Node.js, Express.js, MongoDB
•	Опис: Серверна частина реалізована на платформі Node.js із фреймворком Express.js, що гарантує високу продуктивність і легкість розгортання. Для зберігання даних про офісне середовище використовується NoSQL база да- них MongoDB, оптимальна для роботи з неструктурованою інформацією від IoT-сенсорів. Сервер надає RESTful API для взаємодії з веб- та мобіль- ним клієнтами, а також обробки даних, отриманих від IoT-пристроїв через
протокол MQTT. Для автентифікації користувачів застосовується JSON Web Tokens (JWT).
•	Розгортання: Щоб запустити серверну частину, потрібно клонувати ре- позиторій, виконати npm install для встановлення залежностей, нала- штувати підключення до MongoDB у файлі конфігурації (.env), після чо- го запустити сервер командою npm start. Сервер доступний за адресою localhost:4567.
Веб-інтерфейс
•	Технології: React, Tailwind CSS, Axios
•	Опис: Веб-інтерфейс створено з використанням React та Tailwind CSS для адаптивного та сучасного дизайну. Користувачі можуть реєструватися, ав- торизовуватися, переглядати дані з IoT-сенсорів (температура, вологість, CO2, присутність) у реальному часі, а також отримувати сповіщення про відхилення параметрів. Взаємодія з сервером здійснюється через HTTP-запити за допомогою бібліотеки Axios.
•	Розгортання: Клонуйте репозиторій, виконайте npm install для встанов- лення залежностей, після чого запустіть проєкт командою npm start. Веб- інтерфейс буде доступний за адресою localhost:3000.
Мобільний додаток
•	Технології: Kotlin, Android Studio, Retrofit
•	Опис: Мобільний додаток розроблено на Kotlin із застосуванням архітекту- ри MVVM. Функціонал додатка відповідає веб-інтерфейсу: користувачі мо- жуть реєструватися, авторизуватися, переглядати дані з IoT-сенсорів, отри- мувати сповіщення про стан офісного середовища. Для мережевих запитів використовується бібліотека Retrofit, а відображення даних здійснюється через LiveData та ViewModel, що забезпечує реактивність і плавність інтер- фейсу.
•	Розгортання: Клонуйте репозиторій, відкрийте проєкт у Android Studio, підключіть Android-пристрій або запустіть емулятор, зберіть і запустіть додаток.
IoT-підсистема
•	Технології: Реальні сенсори (температура, вологість, CO2, датчик руху), Arduino IDE, ESP8266, MQTT
•	Опис: IoT-підсистема базується на реальних сенсорах, розроблених вла- сноруч. Сенсори підключені до мікроконтролера ESP8266, який запрогра- мовано через Arduino IDE із використанням бібліотек ESP8266WiFi та PubSubClient. Дані зі сенсорів (температура, вологість, рівень CO2, рух) зчитуються, обро- бляються (перевірка на аномалії) і передаються на сервер через протокол
MQTT. Для тестування використовувалась платформа Wokwi, що дозволи- ла емуляцію роботи датчиків до їх фізичної реалізації.
•	Розгортання: Клонуйте репозиторій із кодом для IoT-пристрою, відкрий- те його в Arduino IDE, налаштуйте параметри Wi-Fi і MQTT-брокера у коді, завантажте прошивку на ESP8266. Для тестування можна запустити ему- ляцію на Wokwi.
Взаємодія компонентів
•	IoT-підсистема зчитує дані з сенсорів і передає їх на сервер через MQTT- брокер.
•	Сервер отримує дані через MQTT, обробляє їх (перевірка на коректність) і зберігає у базі MongoDB.
•	Веб-інтерфейс і мобільний додаток отримують актуальні дані з сервера че- рез REST API та відображають їх користувачу в режимі реального часу.
•	Користувачі можуть переглядати стан офісного середовища (температура, вологість, CO2, присутність) і отримувати сповіщення про потенційні про- блеми.
Використані інструменти та технології
•	Сервер: Node.js, Express.js, MongoDB, MQTT
•	Веб-клієнт: React, Tailwind CSS, Axios
•	Мобільний додаток: Kotlin, Android SDK, Retrofit
•	IoT: Arduino IDE, ESP8266, MQTT, реальні сенсори (температури, вологості, CO2, руху)
•	Інші: Git для контролю версій, Postman для тестування API, Wokwi для ему- ляції IoT-пристрою


5.4 ВИСНОВКИ


У результаті виконаної роботи було успішно розгорнуто та протестовано про- грамну систему OfficeMonitor, яка включає серверну частину, веб-інтерфейс, мо- більний додаток та IoT-підсистему з реальними сенсорами, розробленими мною самостійно. Система демонструє високу функціональність і практичну цінність, забезпечуючи комплексний моніторинг офісного середовища в реальному часі та своєчасне надсилання сповіщень про відхилення параметрів.
Завдяки інтеграції власноруч створених сенсорів, система OfficeMonitor забез- печує точний моніторинг ключових параметрів, таких як температура, воло- гість, рівень CO2 та присутність працівників. Це дозволяє адміністраторам офі- су оперативно реагувати на зміни, що підвищує комфорт і продуктивність ро- бочого середовища. Розробка власних сенсорів підтвердила їхню надійність і масштабованість, відкриваючи можливості для подальшого розширення фун- кціоналу системи.
Отже, проєкт OfficeMonitor не лише виконав поставлені завдання, а й заклав мі- цну основу для майбутніх інновацій у сфері моніторингу офісного середовища.
 
ДОДАТОК А
Посилання на відеозапис доповіді та хронологічний опис

Відеозапис доповіді на YouTube: 
Хронологічний опис:
00:00 - Вступ
 
ДОДАТОК Б
Специфікація API
API Документація для проєкту
Програмна система моніторингу працездатності офісу — OfficeMonitor
Загальна інформація
•	Базовий URL: https://api.office-monitor.com/v1
•	Формат відповіді: JSON
•	Аутентифікація: JWT Token
•	Кодування: UTF-8
Аутентифікація
Реєстрація користувача
POST /auth/register
Тіло запиту:
{
    "email": "user@example.com",
    "password": "password123",
    "firstName": "Олександр",
    "lastName": "Коваленко",
    "phone": "+380501234567"
}
Успішна відповідь (201 Created):
{
    "status": "success",
    "message": "Користувача успішно зареєстровано",
    "data": {
        "userId": "u12345",
        "email": "user@example.com",
        "firstName": "Олександр",
        "lastName": "Коваленко"
    }
}
Авторизація користувача
POST /auth/login
Тіло запиту:
{
    "email": "user@example.com",
    "password": "password123"
}
Успішна відповідь (200 OK):
{
    "status": "success",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
    "refreshToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
}
Управління профілем офісу
Додавання або оновлення профілю офісу
POST /office-profile
Заголовки:
Authorization: Bearer <your_jwt_token>
Тіло запиту:
{
    "officeName": "Main Office",
    "location": "Kyiv, Shevchenka St.",
    "maxCapacity": 30,
    "sensors": ["temperature", "humidity", "CO2", "motion"]
}
Успішна відповідь (200 OK):
{
    "status": "success",
    "message": "Профіль офісу успішно збережено"
}
Дані про офісне середовище
Додавання IoT-показників
POST /environment-data
Заголовки:
Authorization: Bearer <your_jwt_token>
{
    "timestamp": "2025-06-03T10:45:00Z",
    "temperature": 22.5,
    "humidity": 45,
    "co2": 400,
    "motion": 1
}
Успішна відповідь (201 Created):
{
    "status": "success",
    "message": "Дані середовища успішно збережено"
}
Отримання історії показників
GET /environment-data
Заголовки:
Authorization: Bearer <your_jwt_token>
{
    "status": "success",
    "data": {
        "entries": [
            {
                "timestamp": "2025-06-03T10:45:00Z",
                "temperature": 22.5,
                "humidity": 45,
                "co2": 400,
                "motion": 1
            },
            {
                "timestamp": "2025-06-02T09:30:00Z",
                "temperature": 23,
                "humidity": 50,
                "co2": 420,
                "motion": 0
            }
        ]
    }
}
Моніторинг даних датчиків
Отримання даних з IoT-сенсорів офісу
GET /iot/data
Заголовки:
Authorization: Bearer <your_jwt_token>
{ "userId": "u12345" }
Успішна відповідь (200 OK):
{
    "status": "success",
    "data": {
        "temperature": {
            "value": 22.5,
            "unit": "°C",
            "timestamp": "2025-06-03T10:00:00Z"
        },
        "humidity": {
            "value": 45,
            "unit": "%",
            "timestamp": "2025-06-03T10:00:00Z"
        },
        "co2": {
            "value": 400,
            "unit": "ppm",
            "timestamp": "2025-06-03T10:00:00Z"
        },
        "motion": {
            "value": 1,
            "unit": "boolean",
            "timestamp": "2025-06-03T10:00:00Z"
        }
    }
}
Відправка даних із сенсорів (для IoT-пристрою)
POST /iot/data
Тіло запиту:
{
    "userId": "u12345",
    "sensorType": "temperature",
    "value": 22.5,
    "unit": "°C",
    "timestamp": "2025-06-03T10:00:00Z"
}
Успішна відповідь (201 Created):
{
    "status": "success",
    "message": "Дані успішно збережено"
}
Сповіщення
Отримання сповіщень
GET /notifications
Заголовки:
Authorization: Bearer <your_jwt_token>
Параметри запиту:
{
    "userId": "u12345",
    "status": "unread"
}
Успішна відповідь (200 OK):
{
    "status": "success",
    "data": {
        "notifications": [
            {
                "notificationId": "n12345",
                "userId": "u12345",
                "type": "co2",
                "message": "Високий рівень CO2 – 450 ppm",
                "severity": "warning",
                "createdAt": "2025-06-03T10:01:00Z",
                "status": "unread"
            }
        ]
    }
}
Коди помилок
•	Код 400 – неправильний запит
•	Код 401 – не авторизовано
•	Код 403 – доступ заборонено
•	Код 404 – ресурс не знайдено
•	Код 422 – помилка валідації даних
•	Код 500 – внутрішня помилка сервера
Розгортання
Вимоги до системи
•	Серверна частина: Node.js 16+, MongoDB 5.0+, MQTT-брокер (наприклад, Mosquitto)
•	IoT-пристрій: ESP8266 із сенсорами (температура, вологість, CO2, руху) або емулятор Wokwi
•	Веб-клієнт: Node.js 16+, браузер (Chrome, Firefox)
•	Мобільний додаток: Android Studio, Android SDK 31+

