
Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
З лабораторної роботи №3
З дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури, створення та відлагодження програмного коду веб-клієнта програмної системи»








Виконав
ст. гр. ПЗПІ-22-7
Дудуков Олександр	Перевірив ст. викладач каф. ПІ
Сокорчук І. П.


	



Харків 2025
3 РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ, СТВОРЕННЯ ТА ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ВЕБ-КЛІЄНТА ПРОГРАМНОЇ СИСТЕМИ

3.1 ІСТОРІЯ ЗМІН


Метою роботи є розробка бізнес-логіки та функцій адміністрування для серверної частини програмної системи моніторингу працездатності офісу.
У цьому розділі відображено історію внесених змін до звіту, що наведено у таблиці нижче:

Таблиця 1 – Історія змін
№	Дата	Версія	Опис змін
1	21.05.2025	0.1	Створено розділ «Завдання»
2	21.05.2025	0.1	Створено розділ «Опис виконаної роботи»
3	24.05.2025	0.1	Створено розділ «Висновки»
4	27.05.2025	0.1	Додано додатки А, Б, В


3.2 ЗАВДАННЯ


3.2.1 Мета роботи: 
Розробка клієнтську front-end частину програмої системи «SLC System».

Метою роботи є розробка клієнтської front-end частини програмної системи моніторингу працездатності офісу. У межах лабораторної роботи було поставлено завдання створити інтерфейс для взаємодії з серверною частиною системи, що виконує моніторинг мікроклімату в офісних приміщеннях та облік присутності співробітників. Розроблений інтерфейс має забезпечувати функціональність як для звичайних користувачів, так і для адміністраторів. Для користувачів передбачено можливість реєстрації, авторизації, перегляду даних із сенсорів, фіксації присутності та отримання сповіщень. Адміністраторам доступне керування кімнатами, користувачами, пристроями та перегляд аналітики щодо умов у приміщеннях. Інтерфейс має включати візуалізацію показників температури, вологості та рівня CO₂, панель керування, графіки зміни параметрів у часі та систему повідомлень про критичні значення.

3.3	ОПИС ВИКОНАНОЇРОБОТИ


3.3.1 Розробка Use Case діаграми

Під час виконання лабораторної роботи була розроблена Use Case діаграма, яка відображає взаємодію акторів із системою моніторингу працездатності офісу. На діаграмі представлено двох основних акторів: Користувач та Адміністратор. Користувач має можливість реєструватися, авторизуватися, фіксувати свою присутність на робочому місці, переглядати дані з сенсорів щодо мікроклімату (температура, вологість, рівень CO₂), а також отримувати сповіщення у разі виходу параметрів за межі норми. Адміністратор володіє розширеними повноваженнями, зокрема: керування обліковими записами користувачів (активація, блокування, зміна ролей), додавання та редагування кімнат і сенсорів, перегляд аналітики умов у приміщеннях, а також резервне копіювання бази даних. Use Case діаграму можна переглянути в додатку Б.

3.3.2 Розробка діаграми компонентів
Було розроблено діаграму компонентів, яка ілюструє основні модулі веб-частини системи моніторингу працездатності офісу. На діаграмі зображено такі компоненти:
	Реєстрація та авторизація — забезпечує створення облікових
записів користувачів та вхід до системи;
	Управління кімнатами та сенсорами — дозволяє адміністраторам
додавати, редагувати та переглядати інформацію про приміщення та підключені IoT-пристрої;
	Моніторинг мікроклімату — забезпечує відображення в реальному
часі даних з сенсорів (температура, вологість, рівень CO₂);
	Фіксація присутності — дозволяє користувачам відмічати свою
присутність на робочому місці через мобільний або веб-інтерфейс;
	Адміністративне керування — включає функції для управління
обліковими записами користувачів, перегляду сповіщень та виконання резервного копіювання даних.
Діаграму компонентів можна переглянути в додатку Б.

3.3.3 Створення діаграми взаємодії

Було розроблено діаграму взаємодії, яка демонструє послідовність дій адміністратора у веб-інтерфейсі системи моніторингу працездатності офісу. На діаграмі показано, як адміністратор проходить авторизацію, переглядає список зареєстрованих користувачів, змінює їхні ролі, блокує або видаляє облікові записи, а також виконує запити до серверної частини для оновлення відповідних даних у базі. Всі дії супроводжуються обробкою запитів через REST API, а зміни негайно відображаються в інтерфейсі. Діаграму взаємодії можна переглянути в додатку Б.

3.3.4 Створення діаграми діяльності

Під час виконання лабораторної роботи була розроблена діаграма діяльності, яка ілюструє процес взаємодії користувача із системою моніторингу працездатності офісу. На діаграмі показано послідовність дій: реєстрація в системі, авторизація, фіксація присутності на робочому місці, перегляд умов мікроклімату в офісному приміщенні (температура, вологість, рівень CO₂), а також отримання сповіщень у разі перевищення критичних показників. Діаграму діяльності можна переглянути в додатку Б.

3.3.5 Створення веб-частини програмної системи

У рамках виконання лабораторної роботи була розроблена веб-частина програмної системи моніторингу працездатності офісу, що реалізована з використанням бібліотеки React для створення інтерфейсу та бібліотеки Axios для взаємодії з сервером. Реалізовано наступні функціональні компоненти:
• Реєстрація та авторизація — реалізовані за допомогою компонентів Register.js та Login.js, які дозволяють створювати облікові записи та входити в систему;
• Дашборд користувача (Dashboard.js) — надає можливість переглядати параметри мікроклімату в режимі реального часу (температура, вологість, рівень CO₂), фіксувати присутність та переглядати історію перебування;
• Навігаційна панель (Navbar.js) — забезпечує перемикання між сторінками системи та вихід із профілю;
• Адміністративна панель (AdminPanel.js) — дозволяє адміністраторам керувати обліковими записами користувачів (активація, блокування, зміна ролей), додавати кімнати, переглядати список підключених сенсорів і переглядати зведену аналітику.
Веб-частина протестована на базовий функціонал відповідно до REST API системи. Частину програмного коду представлено в додатку В.
 
ВИСНОВКИ


Під час виконання цієї лабораторної роботи було розроблено веб-частину для програмної системи моніторингу працездатності офісу. Було створено UML-діаграми (Use Case, компонентів, взаємодії, діяльності), які наочно демонструють архітектуру та логіку взаємодії між користувачами, адміністраторами та компонентами системи. Реалізований інтерфейс забезпечує функціональність для звичайних користувачів (реєстрація, авторизація, перегляд мікроклімату, фіксація присутності) та адміністраторів (керування кімнатами, пристроями, обліковими записами та перегляд аналітики). Результати роботи відповідають поставленим завданням, а система є функціональною та готова до подальшого розширення. 
ДОДАТОК А

Посилання на відеозапис доповіді та хронологічний опис
Відеозапис доповіді на YouTube: 
Хронологічний опис відео:
00:00 – Початок. Привітання, представлення доповідача, назви теми та цілей
роботи.
00:00 – Dashboard. Демонстрація головної панелі користувача з
відображенням показників мікроклімату: температура, вологість, рівень CO₂.
00:00 – Comfort Advice. Перегляд порад щодо покращення умов на робочому
місці на основі зібраних даних сенсорів.
00:00 – Appointments. Сторінка із нагадуваннями про важливі події, перевірки або обслуговування обладнання.
00:00 – Contact. Інтерфейс зворотного зв’язку або контактної інформації для технічної підтримки.
00:00 – Start Monitoring. Активація функції моніторингу мікроклімату в реальному часі.
00:00 – See Demo. Перегляд демонстраційного прикладу функціоналу системи в дії.
 

ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 – Use Case діаграма

 
Рисунок Б.2 – Діаграма компонентів

  
Рисунок Б.3 – Діаграма взаємодії

 
Рисунок Б.4 – Діаграма діяльності
 
ДОДАТОК В
Програмний код авторизації веб-частини
В.1 Реєстрація
GitHub репозиторій: https://github.com/NureDudukovOleksandr/apz-pzpi-22-7-dudukov-oleksandr/tree/main/Lab3 

1  import React, { useState } from 'react';
 2  import axios from 'axios';
 3  import { useNavigate } from 'react-router-dom';
 4  
 5  const Register = ({ setUser }) => {
 6    const [name, setName] = useState('');
 7    const [email, setEmail] = useState('');
 8    const [password, setPassword] = useState('');
 9    const [error, setError] = useState('');
10    const navigate = useNavigate();
11
12    const handleSubmit = async (e) => {
13      e.preventDefault();
14      try {
15        const res = await axios.post('http://localhost:5000/api/users/register', {
16          name,
17          email,
18          password,
19        });
20        setUser(res.data.user); // якщо бекенд повертає user
21        alert('Успішна реєстрація!');
22        navigate('/login');
23      } catch (err) {
24        setError('Помилка реєстрації. Спробуйте ще раз.');
25      }
26    };
27
28    return (
29      <div className="container">
30        <h2>Реєстрація</h2>
31        <form onSubmit={handleSubmit}>
32          <input
33            type="text"
34            placeholder="Ім’я"
35            value={name}
36            onChange={(e) => setName(e.target.value)}
37            required
38          />
39          <input
40            type="email"
41            placeholder="Ел. пошта"
42            value={email}
43            onChange={(e) => setEmail(e.target.value)}
44            required
45          />
46          <input
47            type="password"
48            placeholder="Пароль"
49            value={password}
50            onChange={(e) => setPassword(e.target.value)}
51            required
52          />
53          <button type="submit">Зареєструватися</button>
54        </form>
55        {error && <p style={{ color: 'red' }}>{error}</p>}
56        <a href="/login">Увійти</a>
57      </div>
58    );
59  };
60
61  export default Register;
