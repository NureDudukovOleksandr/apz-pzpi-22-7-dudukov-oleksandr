Міністерство освіти і науки України
Харківський національний університет радіоелектроніки







Звіт 
до практичного заняття №1 з дисципліни 
«Архітектура програмного забезпечення» 
На тему: «Патерни проєктування»







Виконав:	Перевірив:
Ст. гр. ПЗПІ-22-7 	ст. викладач кафедри ПІ
Дудуков О.С,	Сокорчук Ігор Петрович






Харків 2025
1.	ПАТЕРНИ ПРОЄКТУВАННЯ
1.1 Історія змін

Зміни в документі нотуються до таблиці 1.1.

Таблиця 1.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	12.04.25	0.1	Створено розділ «Історія змін»
2	13.04.25	0.1	Створено розділ «Завдання до практичної роботи»
3	13.04.25	0.1	Створено розділ «Хід роботи»
4	14.04.25	0.1	Створено розділ «Висновки»
5	14.04.25	0.1	Додано додаток А з посиланням на відеоролик
6	15.04.25	0.1	Додано додаток Б зі слайдами презентації
7	15.04.25	0.1	Додано додаток В з програмним кодом

2.	Завдання
•	Вивчити патерн проєктування Singleton.
•	Створити презентацію зі структурою патерна, прикладом з UML та реального світу.
•	Реалізувати приклад патерна на Java.
•	Записати відео з поясненням презентації.
•	Підготувати звіт і додати матеріали на GitHub.


3.	Хід роботи 
Для виконання практичної роботи мною було обрано патерн Singleton (Одиночка), який належить до породжувальних патернів проєктування за книгою Ґамма та співавторів. Його головна мета — забезпечити створення єдиного екземпляра класу та надати глобальну точку доступу до нього.
У процесі роботи було виконано такі етапи:
1.	Ознайомлення з теорією:
o	Вивчено принципи функціонування Singleton, його сфери застосування, переваги та обмеження.
o	Розглянуто особливості реалізації, зокрема проблему багатопоточності та способи її вирішення (наприклад, Double-Checked Locking або Initialization-on-Demand Holder).
2.	Аналіз прикладів:
o	Розглянуто приклади з реального світу: управління єдиним підключенням до бази даних, глобальний логер або конфігурація Telegram-бота.
o	Проведено аналогію з реальним життям: Singleton подібний до єдиного пульта керування в будинку, який контролює всі пристрої.
3.	Створення презентації:
o	Презентація включає:
	Вступ до теми патернів проєктування.
	Загальна ідея та структура патерна Singleton.
	UML-діаграма, що ілюструє клас Singleton та його методи.
	Приклад з життя для наочного пояснення.
	Фрагмент коду на мові Java, що демонструє безпечну реалізацію патерна.
	Слайди з перевагами, недоліками та порівнянням з іншими патернами (наприклад, Factory Method).
4.	Реалізація коду:
o	Розроблено приклад на Java, що демонструє Singleton для управління конфігурацією Telegram-бота.
o	Код включає захист від багатопоточності та демонструє глобальний доступ до екземпляра.
5.	Запис відео:
o	Озвучено презентацію українською мовою, пояснено кожен слайд.
o	Відео завантажено на YouTube за посиланням, указаним у додатку А.
6.	Оформлення матеріалів:
o	Презентацію збережено у форматі PDF.
o	Код додано у вигляді окремого файлу.
o	Усі ресурси зібрано в репозиторії на GitHub для зручного доступу перевіряючого.

4. Висновки
У результаті виконання роботи я глибше зрозумів, як породжувальні патерни, зокрема Singleton, сприяють створенню ефективної та керованої архітектури програмного забезпечення. Основні висновки:
•	Singleton забезпечує єдиний екземпляр класу, що ідеально підходить для ресурсоємних об’єктів, таких як підключення до API Telegram або логери.
•	Патерн спрощує доступ до глобальних ресурсів, але потребує обережного використання через потенційні проблеми в багатопоточних середовищах.
•	Під час виконання роботи я покращив навички програмування на Java, роботи з інструментами презентації та аналізу архітектури ПЗ.
•	Отримані знання будуть корисними в проєктах, де потрібен контроль над єдиними ресурсами, наприклад, у розробці Telegram-ботів або серверних додатків.

 
ДОДАТОК А
Хронологічний опис та посилання
Відеозапис доповіді на YouTube: [Вставте посилання після завантаження]
•	00:00 Вступна частина
Представлення себе, теми та актуальності патернів проєктування. Пояснення вибору патерна Singleton як ключового прикладу породжувального патерна.
•	00:30 Загальна ідея Singleton
Пояснення концепції: забезпечення єдиного екземпляра класу з глобальним доступом.
•	01:00 Структура патерна
Розбір структури: приватний конструктор, статичне поле instance, метод getInstance(). Показ UML-діаграми.
•	01:30 Приклад використання
Приклад із конфігурацією Telegram-бота для зберігання токена та налаштувань API.
•	02:00 Реалізація коду
Показ коду на Java з захистом від багатопоточності (volatile, synchronized).
•	02:30 Переваги та недоліки
Переваги: економія ресурсів, контроль доступу. Недоліки: проблеми з тестуванням, багатопоточність.
•	03:00 Порівняння з іншими патернами
Порівняння Singleton із Factory Method: один екземпляр проти сімейства об’єктів.
•	03:30 Висновки
Підсумки: значення Singleton для управління ресурсами, рекомендації щодо використання.


ДОДАТОК Б
Слайди презентації на тему «Патерн Singleton»

 
Рисунок Б.1 – Титульний слайд

 
Рисунок Б.2 – Загальна ідея патерна Singleton

 
Рисунок Б.3 – Структура патерна Singleton




 Рисунок Б.4 – Приклад використання

 
Рисунок Б.5 – Реалізація коду




 
Рисунок Б.6 – Переваги та недоліки патерна


  Рисунок Б.7 – Порівняння з іншими патернами



 Рисунок Б.8 – Висновки


 
 

ДОДАТОК В
// Singleton клас для конфігурації Telegram-бота
public class TelegramBotConfig {
    // Єдиний екземпляр класу
    private static volatile TelegramBotConfig instance;
    
    // Приватні дані конфігурації
    private String botToken;
    
    // Приватний конструктор для запобігання створенню об’єктів
    private TelegramBotConfig() {
        // Запобігає створенню через рефлексію
        if (instance != null) {
            throw new RuntimeException("Use getInstance() method to get the single instance.");
        }
        this.botToken = "YOUR_BOT_TOKEN_HERE"; // Приклад токена
    }
    
    // Метод для отримання єдиного екземпляра (thread-safe)
    public static TelegramBotConfig getInstance() {
        if (instance == null) {
            synchronized (TelegramBotConfig.class) {
                if (instance == null) {
                    instance = new TelegramBotConfig();
                }
            }
        }
        return instance;
    }
    
    // Метод для отримання токена
    public String getBotToken() {
        return botToken;
    }
}

// Використання
public class Main {
    public static void main(String[] args) {
        // Отримання єдиного екземпляра
        TelegramBotConfig config1 = TelegramBotConfig.getInstance();
        TelegramBotConfig config2 = TelegramBotConfig.getInstance();
        
        // Перевірка, що це той самий об’єкт
        System.out.println("Same instance? " + (config1 == config2)); // Виведе: true
        System.out.println("Bot Token: " + config1.getBotToken()); // Виведе: YOUR_BOT_TOKEN_HERE
    }
}

