
Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра програмної інженерії





Звіт
З лабораторної роботи №4
З дисципліни «Архітектура програмного забезпечення»
на тему: «Розробка програмної архітектури та створення і відлагодження програмного коду програмного застосунку мобільного пристрою для програмної системи»






Виконавець:		
ст. гр. ПЗПІ-22-7						                    Дудуков О. С. 

Перевірив:		
ст. викладач кафедри ПІ				                    Сокорчук І. П. 
	




Харків 2025
4 РОЗРОБКА ПРОГРАМНОЇ АРХІТЕКТУРИ ТА СТВОРЕННЯ І ВІДЛАГОДЖЕННЯ ПРОГРАМНОГО КОДУ ПРОГРАМНОГО ЗАСТОСУНКУ МОБІЛЬНОГО ПРИСТРОЮ ДЛЯ ПРОГРАМНОЇ СИСТЕМИ
4.1 ІСТОРІЯ ЗМІН


Зміни в документі нотуються до таблиці 4.1.

Таблиця 4.1 – Історія змін
№	Дата	Версія звіту	Опис змін та виправлень
1	27.05.25	0.1	Створено розділ «Історія змін»
2	28.05.25	0.1	Створено розділ «Завдання»
3	28.05.25	0.1	Створено розділ «Опис виконаної роботи»
4	28.05.25	0.1	Створено розділ «Висновки»
5	01.06.25	0.2	Додано додаток А з посиланням на відеоролик
6	03.06.25	0.2	Додано додаток Б з графічними матеріалами
7	03.06.25	0.2	Додано додаток В з програмним кодом


4.2 ЗАВДАННЯ

Мета завдання полягає в розробці функціональної частини мобільного клієнта програмної системи «Моніторингу працездатності офісу», яка забезпечує підтримку користувачів на платформі Android.
Мобільний застосунок створюється з метою забезпечення зручного та інтуїтивно зрозумілого інтерфейсу для спостереження за станом офісної інфраструктури в режимі реального часу. Основна увага приділяється реалізації базового функціоналу, що включає:
•	реєстрацію та авторизацію користувачів;
•	перегляд загального стану офісу (дані сенсорів, активність);
•	відображення журналу подій або змін у системі;
•	можливість адміністрування (для користувачів з відповідними правами).
Також реалізується інтеграція з серверною частиною через REST API, з використанням бази даних MongoDB для зберігання облікових записів користувачів, даних сенсорів та історії подій.
Проєкт передбачає дотримання принципів адаптивного дизайну для забезпечення коректного відображення інтерфейсу на різних типах Android-пристроїв. Метою є створення надійного, функціонального та зручного у використанні мобільного інструменту для ефективного управління офісною інфраструктурою та моніторингу її працездатності.


4.3	 ОПИС ВИКОНАНОЇРОБОТИ


Мобільний застосунок «Моніторинг працездатності офісу» був розроблений для Android-платформи з використанням мови Kotlin та архітектурного шаблону MVVM.
Інтерфейс створено за допомогою Jetpack Compose — сучасного інструменту для розробки UI в Android. Основні екрани: вхід, реєстрація, головна панель та журнал подій. Вони мають просту й зручну структуру, що адаптується під різні розміри екранів.
Дані надходять із серверної частини через REST API. Для цього в застосунку використовується бібліотека Retrofit. Отримані JSON-дані перетворюються у Kotlin-об'єкти за допомогою Gson або kotlinx.serialization.
Застосунок взаємодіє з базою даних MongoDB, яка розміщена на сервері. Крім того, в майбутньому планується підключення IoT-сенсорів для збору даних у реальному часі через протокол MQTT.
Локально на телефоні зберігається лише токен авторизації (JWT), який дозволяє виконувати захищені запити до сервера. Для цього використовується SharedPreferences.
Головні технології, які використовувались:
•	Kotlin — мова програмування;
•	Jetpack Compose — побудова UI;
•	Retrofit + Gson — робота з API;
•	MongoDB — база даних на сервері;
•	JWT — авторизація користувачів;
•	SharedPreferences — локальне зберігання.
Функціонал застосунку включає:
•	реєстрацію та вхід користувача;
•	перегляд основних показників стану офісу (температура, освітлення, вологість тощо);
•	журнал подій з історією змін;
•	підтримку української та англійської мови через файли локалізації.
Застосунок розроблено з урахуванням адаптивного дизайну та готовий до подальшого розширення функцій.


4.4 ВИСНОВКИ

У результаті виконання завдання було успішно розроблено мобільний застосунок «Моніторинг працездатності офісу» для Android-платформи.
Застосунок реалізовано на мові Kotlin з використанням архітектури MVVM, що забезпечує чітке розділення між логікою, даними та інтерфейсом. Це дозволяє легко масштабувати та підтримувати проєкт у майбутньому.
Інтерфейс додатку створено за допомогою Jetpack Compose, він є інтуїтивно зрозумілим і адаптованим для різних мобільних пристроїв. Реалізовано основні екрани:
•	вхід та реєстрація користувача з використанням JWT;
•	головна панель з показниками стану офісу (температура, освітлення, вологість);
•	історія змін з можливістю перегляду попередніх даних.
Обмін даними здійснюється через REST API, підключена база даних MongoDB для зберігання інформації, а також передбачено підтримку MQTT для інтеграції з IoT-сенсорами в режимі реального часу.
Загалом, мобільний застосунок готовий до подальшого практичного використання. Він може бути основою для розширення функцій, таких як графіки, автоматичні сповіщення або системи контролю енергоефективності офісу.
 

ДОДАТОК А
Посилання на відеозапис доповіді та хронологічний опис

Відеозапис доповіді на YouTube: 
Хронологічний опис:
00:00 – Вступ

 

ДОДАТОК Б
Графічні матеріали

 
Рисунок Б.1 – UML діаграма прецедентів
 
Рисунок Б.2 – UML діаграма компонентів

 
Рисунок Б.3 – ER-модель даних мобільної платформи

 
Рисунок Б.4 – UML діаграма діяльності



ДОДАТОК В
Програмний код авторизації веб-частини
В.1 Реєстрація
GitHub репозиторій: 
01 import androidx.compose.foundation.layout.*
02 import androidx.compose.foundation.text.KeyboardOptions
03 import androidx.compose.material3.*
04 import androidx.compose.runtime.*
05 import androidx.compose.ui.Alignment
06 import androidx.compose.ui.Modifier
07 import androidx.compose.ui.graphics.Color
08 import androidx.compose.ui.text.input.KeyboardType
09 import androidx.compose.ui.text.input.PasswordVisualTransformation
10 import androidx.compose.ui.unit.dp
11 import androidx.navigation.NavController
12 import com.example.apz111.navigation.Screen

13 @Composable
14 fun AuthScreen(navController: NavController) {
15     var login by remember { mutableStateOf("") }
16     var password by remember { mutableStateOf("") }
17     var error by remember { mutableStateOf(false) }

18     Column(
19         modifier = Modifier
20             .fillMaxSize()
21             .padding(24.dp),
22         verticalArrangement = Arrangement.Center,
23         horizontalAlignment = Alignment.CenterHorizontally
24     ) {
25         Text(
26             text = "Вхід у систему моніторингу офісу",
27             style = MaterialTheme.typography.headlineSmall,
28             modifier = Modifier.padding(bottom = 32.dp)
29         )

30         OutlinedTextField(
31             value = login,
32             onValueChange = { login = it },
33             label = { Text("Логін") },
34             modifier = Modifier.fillMaxWidth()
35         )

36         OutlinedTextField(
37             value = password,
38             onValueChange = { password = it },
39             label = { Text("Пароль") },
40             visualTransformation = PasswordVisualTransformation(),
41             keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Password),
42             modifier = Modifier
43                 .fillMaxWidth()
44                 .padding(top = 16.dp)
45         )

46         if (error) {
47             Text(
48                 text = "Невірний логін або пароль",
49                 color = Color.Red,
50                 modifier = Modifier.padding(top = 8.dp)
51             )
52         }

53         Button(
54             onClick = {
55                 if (login == "admin" && password == "admin") {
56                     navController.navigate(Screen.Dashboard.route)
57                 } else {
58                     error = true
59                 }
60             },
61             modifier = Modifier
62                 .fillMaxWidth()
63                 .padding(top = 24.dp)
64         ) {
65             Text("Увійти")
66         }
67     }
68 }

В.2 Екран Dashboard
GitHub репозиторій: 
01 package com.example.apz111.features.dashboard

02 import androidx.compose.foundation.layout.*
03 import androidx.compose.material3.*
04 import androidx.compose.runtime.*
05 import androidx.compose.ui.Alignment
06 import androidx.compose.ui.Modifier
07 import androidx.compose.ui.unit.dp
08 import androidx.hilt.navigation.compose.hiltViewModel
09 import com.example.apz111.viewmodel.DashboardViewModel

10 @OptIn(ExperimentalMaterial3Api::class)
11 @Composable
12 fun DashboardScreen(token: String, viewModel: DashboardViewModel = hiltViewModel()) {
13     val data by viewModel.sensorData.collectAsState()

14     LaunchedEffect(Unit) {
15         viewModel.loadSensorData(token)
16     }

17     Scaffold(
18         topBar = {
19             TopAppBar(
20                 title = { Text("Моніторинг офісу") }
21             )
22         }
23     ) { padding ->
24         Column(
25             modifier = Modifier
26                 .padding(padding)
27                 .padding(16.dp)
28                 .fillMaxSize(),
29             verticalArrangement = Arrangement.spacedBy(12.dp),
30             horizontalAlignment = Alignment.Start
31         ) {
32             Text("📊 Поточні показники:", style = MaterialTheme.typography.titleMedium)

33             Card(modifier = Modifier.fillMaxWidth()) {
34                 Column(Modifier.padding(16.dp)) {
35                     Text(" Температура: ${data?.temperature ?: "–"} °C")
36                     Text( Вологість: ${data?.humidity ?: "–"} %")
37                     Text(" CO₂: ${data?.co2 ?: "–"} ppm")
38                 }
39             }

40             Spacer(Modifier.height(12.dp))

41             Text(" Стан системи:", style = MaterialTheme.typography.titleMedium)
42             Text(" Стан співробітників: Усі в нормі")
43             Text(" Сервери: Працюють стабільно")
44             Text(" Інтернет: З'єднання активне")
45             Text(" Кондиціювання: В межах норми")
46         }
47     }
48 }
