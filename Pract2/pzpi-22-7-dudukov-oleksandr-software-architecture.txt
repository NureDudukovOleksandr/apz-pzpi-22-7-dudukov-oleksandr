
Міністерство освіти і науки України
Харківський національний університет радіоелектроніки







Звіт 
до практичного заняття №2 з дисципліни 
«Архітектура програмного забезпечення» 
На тему: «Архітектура відомих програмних систем»







Виконав:	Перевірив:
Ст. гр. ПЗПІ-22-7 	ст. викладач кафедри ПІ
Дудуков О.С,	Сокорчук Ігор Петрович






Харків 2025
1.	Мета роботи
1.1	Історія змін

Зміни в документі нотуються до таблиці 1.1.

Таблиця 1.1 – Історія змін

№	Дата	Версія звіту	Опис змін та виправлень
1	14.04.25
	0.1	Створено розділ «Історія змін»
2	14.04.25	0.1	Створено розділ «Завдання до практичної роботи»
3	15.04.25	0.1	Створено розділ «Хід роботи»
4	15.04.25	0.1	Створено розділ «Висновки»
5	15.04.25	0.1	Додано додаток А з посиланням на відеоролик
6	15.04.25	0.1	Додано додаток Б зі слайдами презентації
7	15.04.25	0.1	Додано додаток В з програмним кодом
  

2. Завдання
•	Вивчити архітектуру системи Discord, платформи для спілкування, що обслуговує мільйони користувачів.
•	Підготувати презентацію, яка описує архітектуру, її компоненти, принципи роботи та приклади використання.
•	Записати відео з поясненням презентації.
•	Скласти звіт і завантажити всі матеріали на GitHub.

 3. Хід роботи
Для виконання практичної роботи я обрав систему Discord, яка є прикладом масштабованої архітектури для реального часу спілкування. У процесі роботи виконано такі етапи:
1.	Ознайомлення з теорією:
o	Вивчено основи архітектури Discord, зокрема використання Elixir на віртуальній машині BEAM.
o	Проаналізовано ключові компоненти: guild processes, user sessions, relays, ETS, Manifold Offload.
o	Досліджено оптимізації продуктивності, такі як використання Rust для обчислювально інтенсивних завдань.
2.	Аналіз джерел:
o	Використано офіційні блог-пости Discord, зокрема статті про масштабування до мільйона+ користувачів на одному сервері.
o	Проаналізовано технічні статті про вибір структур даних та оптимізацію продуктивності.
3.	Створення презентації:
o	Презентація включає 11 слайдів:
	Вступ до Discord та його архітектури.
	Огляд ключових компонентів (guild processes, user sessions, relays).
	Детальний опис масштабування та керування даними.
	Приклади оптимізацій і викликів.
	UML-діаграма для guild process.
	Фрагмент коду на Elixir для демонстрації концепції.
o	Використано єдину кольорову схему (синій #0078D4, сірий #F5F5F5) та іконки з Flaticon.
4.	Реалізація коду:
o	Розроблено спрощений приклад на Elixir, що ілюструє guild process для управління повідомленнями.
o	Код включає базову логіку розсилки оновлень до сесій користувачів.
5.	Запис відео:
o	Презентацію озвучено українською мовою, пояснено кожен слайд.
o	Відео завантажено на YouTube (посилання в додатку А).
6.	Оформлення матеріалів:
o	Презентацію збережено у форматі PDF.
o	Код додано у вигляді окремого файлу.
o	Усі ресурси зібрано в репозиторії на GitHub.

4. Висновки
У результаті виконання роботи я поглибив розуміння архітектури масштабованої системи реального часу на прикладі Discord. Основні висновки:
•	Discord використовує Elixir і BEAM для ефективної обробки мільйонів паралельних процесів.
•	Ключові компоненти, такі як guild processes, user sessions і relays, забезпечують масштабованість і швидкість.
•	Оптимізації, такі як використання Rust і пасивних сесій, вирішують проблеми квадратичного зростання навантаження.
•	Отримані знання будуть корисними для розробки подібних систем, наприклад, чат-ботів або платформ для спілкування.













ДОДАТОК А
Хронологічний опис та посилання
Відеозапис доповіді на YouTube: [Вставте посилання після завантаження]
Хронологічний опис доповіді:
•	00:00 Вступна частина
Представлення себе, теми та актуальності вивчення архітектури Discord.
•	00:30 Що таке Discord
Опис платформи та її популярності.
•	00:55 Загальний огляд архітектури
Пояснення використання Elixir, BEAM і основних компонентів.
•	01:20 Guild Processes
Опис ролі процесів гільдій у маршрутизації повідомлень.
•	01:45 User Sessions
Пояснення роботи сесій користувачів і пасивних сесій.
•	02:10 Масштабування
Огляд relays і Manifold Offload.
•	02:30 Керування даними
Опис ETS і worker processes.
•	02:50 Оптимізації продуктивності
Використання Rust і спеціальних структур даних.
•	03:10 Виклики та рішення
Обговорення квадратичного зростання та його вирішення.
•	03:30 Висновки
Підсумки та значення архітектури Discord.


 


 



